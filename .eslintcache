[{"D:\\web\\faceRecoReact\\facerecognition\\src\\index.js":"1","D:\\web\\faceRecoReact\\facerecognition\\src\\App.js":"2","D:\\web\\faceRecoReact\\facerecognition\\src\\reportWebVitals.js":"3","D:\\web\\faceRecoReact\\facerecognition\\src\\views\\Home\\Home.js":"4","D:\\web\\faceRecoReact\\facerecognition\\src\\views\\ImageInput.js":"5","D:\\web\\faceRecoReact\\facerecognition\\src\\api\\face.js":"6"},{"size":580,"mtime":1606986053009,"results":"7","hashOfConfig":"8"},{"size":489,"mtime":1606986878976,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":363,"mtime":1606986077167,"results":"11","hashOfConfig":"8"},{"size":3418,"mtime":1607064801404,"results":"12","hashOfConfig":"8"},{"size":1610,"mtime":1607118994441,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gt3t1x",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\web\\faceRecoReact\\facerecognition\\src\\index.js",[],["28","29"],"D:\\web\\faceRecoReact\\facerecognition\\src\\App.js",[],"D:\\web\\faceRecoReact\\facerecognition\\src\\reportWebVitals.js",[],"D:\\web\\faceRecoReact\\facerecognition\\src\\views\\Home\\Home.js",[],"D:\\web\\faceRecoReact\\facerecognition\\src\\views\\ImageInput.js",["30"],"import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { loadModels, getFullFaceDescription,createMatcher } from '../api/face';\r\n\r\nimport TestImage from '../img/test.jpg'\r\n\r\n//import JSON file\r\n\r\nconst JSON_PROFILE = require('../descriptors/sample.json');\r\n\r\n// Import image to test API\r\nlet fs = require('fs');\r\n// Initial State\r\nconst INIT_STATE = {\r\n  imageURL: TestImage,\r\n    fullDesc: null,\r\n  detections: null,\r\n   descriptors: null,\r\n  match: null\r\n};\r\n\r\nclass ImageInput extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n    this.state = { ...INIT_STATE,faceMatcher:null };\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n      await loadModels();\r\n     this.setState({ faceMatcher: await createMatcher(JSON_PROFILE) });\r\n    await this.handleImage(this.state.imageURL);\r\n  };\r\n\r\n  handleImage = async (image = this.state.imageURL) => {\r\n    await getFullFaceDescription(image).then(fullDesc => {\r\n      if (!!fullDesc) {\r\n        this.setState({\r\n          fullDesc,\r\n          detections: fullDesc.map(fd => fd.detection),\r\n          descriptors: fullDesc.map(fd => fd.descriptor)\r\n        });\r\n      }\r\n    });\r\n\r\n    if (!!this.state.descriptors && !!this.state.faceMatcher) {\r\n      let match = await this.state.descriptors.map(descriptor =>\r\n        this.state.faceMatcher.findBestMatch(descriptor)\r\n      );\r\n      this.setState({ match });\r\n    }\r\n  };\r\n   \r\n\r\n  handleFileChange = async event => {\r\n    this.resetState();\r\n    await this.setState({\r\n      imageURL: URL.createObjectURL(event.target.files[0]),\r\n      loading: true\r\n    });\r\n    this.handleImage();\r\n  };\r\n\r\n  resetState = () => {\r\n    this.setState({ ...INIT_STATE });\r\n  };\r\n\r\n  render() {\r\n     \r\n      const { imageURL, detections,match } = this.state;\r\n      let drawBox = null;\r\n    if (!!detections) {\r\n      drawBox = detections.map((detection, i) => {\r\n        let _H = detection.box.height;\r\n        let _W = detection.box.width;\r\n        let _X = detection.box._x;\r\n        let _Y = detection.box._y;\r\n        return (\r\n          <div key={i}>\r\n            <div\r\n              style={{\r\n                position: 'absolute',\r\n                border: 'solid',\r\n                borderColor: 'blue',\r\n                height: _H,\r\n                width: _W,\r\n                transform: `translate(${_X}px,${_Y}px)`\r\n              }}\r\n            >{!!match && !!match[i] ? (\r\n                <p\r\n                  style={{\r\n                    backgroundColor: 'blue',\r\n                    border: 'solid',\r\n                    borderColor: 'blue',\r\n                    width: _W,\r\n                    marginTop: 0,\r\n                    color: '#fff',\r\n                    transform: `translate(-3px,${_H}px)`\r\n                  }}\r\n                >\r\n                  {match[i]._label}\r\n                </p>\r\n              ) : null}</div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <input\r\n          id=\"myFileUpload\"\r\n          type=\"file\"\r\n          onChange={this.handleFileChange}\r\n          accept=\".jpg, .jpeg, .png\"\r\n        />\r\n        <div style={{ position: 'relative' }}>\r\n          <div style={{ position: 'absolute' }}>\r\n            <img src={imageURL} alt=\"imageURL\" />\r\n          </div>\r\n          {!!drawBox ? drawBox : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ImageInput);","D:\\web\\faceRecoReact\\facerecognition\\src\\api\\face.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":12,"column":5,"nodeType":"37","messageId":"38","endLine":12,"endColumn":7},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'fs' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]